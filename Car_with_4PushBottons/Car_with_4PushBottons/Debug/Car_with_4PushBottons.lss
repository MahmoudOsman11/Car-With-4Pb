
Car_with_4PushBottons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000005c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b3  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ba  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000df  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 a4 02 	jmp	0x548	; 0x548 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <motors_int>:
#include "motors.h"


void motors_int(void)
{
	DIO_PinMode(MotorA1,OUTPUT);
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(MotorA2,OUTPUT);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(MotorB1,OUTPUT);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(MotorB2,OUTPUT);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
  b0:	08 95       	ret

000000b2 <Move_Forward>:
}


void Move_Forward(void){
	DIO_digitalWrite(MotorA1,HIGH);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorA2,LOW);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB1,HIGH);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB2,LOW);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
  d2:	08 95       	ret

000000d4 <Move_Right>:
}

void Move_Right(void){
	DIO_digitalWrite(MotorA1,HIGH);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorA2,LOW);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB1,LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB2,LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
  f4:	08 95       	ret

000000f6 <Move_Left>:
	
}
void Move_Left(void){
	DIO_digitalWrite(MotorA1,LOW);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorA2,LOW);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB1,HIGH);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB2,LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
 116:	08 95       	ret

00000118 <Move_Back>:
	
	
}
void Move_Back(void)
{
	DIO_digitalWrite(MotorA1,LOW);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorA2,HIGH);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB1,LOW);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB2,HIGH);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
 138:	08 95       	ret

0000013a <Stop>:
	
}
void Stop(void)
{
	DIO_digitalWrite(MotorA1,LOW);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorA2,LOW);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB1,LOW);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	DIO_digitalWrite(MotorB2,LOW);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
 15a:	08 95       	ret

0000015c <main>:
uint8 Forward_PB,Right_PB, Left_PB, Back_PB, Stop_PB;
uint16 Led1Counter=0,Led2Counter=0,Led3Counter=0;
int main(void)
{
	//Pb mode to be INPUT
	DIO_PinMode(PC_0,INPUT);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PC_1,INPUT);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	8b e0       	ldi	r24, 0x0B	; 11
 168:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PC_2,INPUT);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PC_3,INPUT);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PC_4,INPUT);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	
	//LED mode to be OUTPUT
	DIO_PinMode(PD_0,OUTPUT);  //LED1
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	84 e1       	ldi	r24, 0x14	; 20
 188:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PD_1,OUTPUT);  //LED2
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	85 e1       	ldi	r24, 0x15	; 21
 190:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
	DIO_PinMode(PD_2,OUTPUT);  //LED3
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	86 e1       	ldi	r24, 0x16	; 22
 198:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_PinMode>
    //Motors Initialization
	motors_int();
 19c:	0e 94 48 00 	call	0x90	; 0x90 <motors_int>
    while (1) 
    {
		Forward_PB=DIO_digitalRead(PC_0);
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <DIO_digitalRead>
 1a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Forward_PB>
		Right_PB=DIO_digitalRead(PC_1);
 1aa:	8b e0       	ldi	r24, 0x0B	; 11
 1ac:	0e 94 73 02 	call	0x4e6	; 0x4e6 <DIO_digitalRead>
 1b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Right_PB>
		Left_PB=DIO_digitalRead(PC_2);
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <DIO_digitalRead>
 1ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Left_PB>
		Back_PB=DIO_digitalRead(PC_3);
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <DIO_digitalRead>
 1c4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Back_PB>
		Stop_PB=DIO_digitalRead(PC_4);
 1c8:	8e e0       	ldi	r24, 0x0E	; 14
 1ca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <DIO_digitalRead>
 1ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Stop_PB>
		
		if(Forward_PB==HIGH){
 1d2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Forward_PB>
 1d6:	91 30       	cpi	r25, 0x01	; 1
 1d8:	a9 f4       	brne	.+42     	; 0x204 <main+0xa8>
			DIO_digitalWrite(PD_0,HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	84 e1       	ldi	r24, 0x14	; 20
 1de:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_1,LOW);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	85 e1       	ldi	r24, 0x15	; 21
 1e6:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_2,LOW);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	86 e1       	ldi	r24, 0x16	; 22
 1ee:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			Led1Counter=LED_Time;
 1f2:	8c e2       	ldi	r24, 0x2C	; 44
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Led1Counter+0x1>
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Led1Counter>
			
			Move_Forward();
 1fe:	0e 94 59 00 	call	0xb2	; 0xb2 <Move_Forward>
 202:	5f c0       	rjmp	.+190    	; 0x2c2 <main+0x166>
		}
		
		else if(Right_PB==HIGH){
 204:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Right_PB>
 208:	91 30       	cpi	r25, 0x01	; 1
 20a:	a9 f4       	brne	.+42     	; 0x236 <main+0xda>
			DIO_digitalWrite(PD_1,HIGH);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	85 e1       	ldi	r24, 0x15	; 21
 210:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_0,LOW);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	84 e1       	ldi	r24, 0x14	; 20
 218:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_2,LOW);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	86 e1       	ldi	r24, 0x16	; 22
 220:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			Led2Counter=LED_Time;
 224:	8c e2       	ldi	r24, 0x2C	; 44
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Led2Counter+0x1>
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Led2Counter>
			
			Move_Right();
 230:	0e 94 6a 00 	call	0xd4	; 0xd4 <Move_Right>
 234:	46 c0       	rjmp	.+140    	; 0x2c2 <main+0x166>
			
		}
		else if(Left_PB==HIGH){
 236:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Left_PB>
 23a:	91 30       	cpi	r25, 0x01	; 1
 23c:	a9 f4       	brne	.+42     	; 0x268 <main+0x10c>
			DIO_digitalWrite(PD_2,HIGH);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	86 e1       	ldi	r24, 0x16	; 22
 242:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_0,LOW);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	84 e1       	ldi	r24, 0x14	; 20
 24a:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_1,LOW);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	85 e1       	ldi	r24, 0x15	; 21
 252:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			Led3Counter=LED_Time;
 256:	8c e2       	ldi	r24, 0x2C	; 44
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			Move_Left();
 262:	0e 94 7b 00 	call	0xf6	; 0xf6 <Move_Left>
 266:	2d c0       	rjmp	.+90     	; 0x2c2 <main+0x166>
			
		}
		else if(Back_PB==HIGH){
 268:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Back_PB>
 26c:	91 30       	cpi	r25, 0x01	; 1
 26e:	c9 f4       	brne	.+50     	; 0x2a2 <main+0x146>
			DIO_digitalWrite(PD_1,HIGH);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	85 e1       	ldi	r24, 0x15	; 21
 274:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_2,HIGH);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	86 e1       	ldi	r24, 0x16	; 22
 27c:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			DIO_digitalWrite(PD_0,LOW);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	84 e1       	ldi	r24, 0x14	; 20
 284:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
			Led2Counter=LED_Time;
 288:	8c e2       	ldi	r24, 0x2C	; 44
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Led2Counter+0x1>
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Led2Counter>
			Led3Counter=LED_Time;
 294:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			Move_Back();
 29c:	0e 94 8c 00 	call	0x118	; 0x118 <Move_Back>
 2a0:	10 c0       	rjmp	.+32     	; 0x2c2 <main+0x166>
			
		}
	else if(Stop_PB==HIGH){
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	71 f4       	brne	.+28     	; 0x2c2 <main+0x166>
		DIO_digitalWrite(PD_0,LOW);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	84 e1       	ldi	r24, 0x14	; 20
 2aa:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
		DIO_digitalWrite(PD_1,LOW);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	85 e1       	ldi	r24, 0x15	; 21
 2b2:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
		DIO_digitalWrite(PD_2,LOW);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	86 e1       	ldi	r24, 0x16	; 22
 2ba:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
		Stop();
 2be:	0e 94 9d 00 	call	0x13a	; 0x13a <Stop>
		
	}
	
	if(Led1Counter>0) Led1Counter--;
 2c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Led1Counter>
 2c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Led1Counter+0x1>
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	29 f0       	breq	.+10     	; 0x2d8 <main+0x17c>
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Led1Counter+0x1>
 2d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Led1Counter>
	if(Led2Counter>0) Led2Counter--;
 2d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Led2Counter>
 2dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Led2Counter+0x1>
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	29 f0       	breq	.+10     	; 0x2ee <main+0x192>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Led2Counter+0x1>
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Led2Counter>
	if(Led3Counter>0) Led3Counter--;
 2ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	29 f0       	breq	.+10     	; 0x304 <main+0x1a8>
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 300:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(Led1Counter==0){
 304:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Led1Counter>
 308:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Led1Counter+0x1>
 30c:	89 2b       	or	r24, r25
 30e:	21 f4       	brne	.+8      	; 0x318 <main+0x1bc>
		DIO_digitalWrite(PD_0,LOW);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	84 e1       	ldi	r24, 0x14	; 20
 314:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	}
	if(Led2Counter==0){
 318:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Led2Counter>
 31c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Led2Counter+0x1>
 320:	89 2b       	or	r24, r25
 322:	21 f4       	brne	.+8      	; 0x32c <main+0x1d0>
		DIO_digitalWrite(PD_1,LOW);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	85 e1       	ldi	r24, 0x15	; 21
 328:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	}
	if(Led3Counter==0){
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 330:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 334:	89 2b       	or	r24, r25
 336:	21 f4       	brne	.+8      	; 0x340 <main+0x1e4>
		DIO_digitalWrite(PD_2,LOW);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	86 e1       	ldi	r24, 0x16	; 22
 33c:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0x1e8>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x1ee>
 34a:	00 00       	nop
 34c:	29 cf       	rjmp	.-430    	; 0x1a0 <main+0x44>

0000034e <DIO_PinMode>:
 */ 
#include <avr/io.h>
#include "DIO/DIO.h"
#include "BIT_MATH.h"
void DIO_PinMode(uint8 Pin_No ,uint8 Mode ){
	uint8 port=Pin_No/10;
 34e:	9d ec       	ldi	r25, 0xCD	; 205
 350:	89 9f       	mul	r24, r25
 352:	91 2d       	mov	r25, r1
 354:	11 24       	eor	r1, r1
 356:	96 95       	lsr	r25
 358:	96 95       	lsr	r25
 35a:	96 95       	lsr	r25
	uint8 Pin=Pin_No%10;
 35c:	39 2f       	mov	r19, r25
 35e:	33 0f       	add	r19, r19
 360:	23 2f       	mov	r18, r19
 362:	22 0f       	add	r18, r18
 364:	22 0f       	add	r18, r18
 366:	23 0f       	add	r18, r19
 368:	82 1b       	sub	r24, r18
 36a:	28 2f       	mov	r18, r24
	switch(port){
 36c:	91 30       	cpi	r25, 0x01	; 1
 36e:	f9 f0       	breq	.+62     	; 0x3ae <DIO_PinMode+0x60>
 370:	18 f0       	brcs	.+6      	; 0x378 <DIO_PinMode+0x2a>
 372:	92 30       	cpi	r25, 0x02	; 2
 374:	b9 f1       	breq	.+110    	; 0x3e4 <DIO_PinMode+0x96>
 376:	08 95       	ret
		
		case 0:
		if(Mode==1)
 378:	61 30       	cpi	r22, 0x01	; 1
 37a:	59 f4       	brne	.+22     	; 0x392 <DIO_PinMode+0x44>
		{
			SET_BIT(DDRB,Pin);
 37c:	34 b1       	in	r19, 0x04	; 4
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_PinMode+0x3a>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	2a 95       	dec	r18
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_PinMode+0x36>
 38c:	83 2b       	or	r24, r19
 38e:	84 b9       	out	0x04, r24	; 4
 390:	08 95       	ret
		}
		else if(Mode==0){
 392:	61 11       	cpse	r22, r1
 394:	41 c0       	rjmp	.+130    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			CLR_BIT(DDRB,Pin);
 396:	34 b1       	in	r19, 0x04	; 4
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_PinMode+0x54>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	2a 95       	dec	r18
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_PinMode+0x50>
 3a6:	80 95       	com	r24
 3a8:	83 23       	and	r24, r19
 3aa:	84 b9       	out	0x04, r24	; 4
 3ac:	08 95       	ret
		}
		
		break;
		case 1:
		if(Mode==1)
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	59 f4       	brne	.+22     	; 0x3c8 <DIO_PinMode+0x7a>
		{
			SET_BIT(DDRC,Pin);
 3b2:	37 b1       	in	r19, 0x07	; 7
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_PinMode+0x70>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	2a 95       	dec	r18
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_PinMode+0x6c>
 3c2:	83 2b       	or	r24, r19
 3c4:	87 b9       	out	0x07, r24	; 7
 3c6:	08 95       	ret
		}
		else if(Mode==0){
 3c8:	61 11       	cpse	r22, r1
 3ca:	26 c0       	rjmp	.+76     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			CLR_BIT(DDRC,Pin);
 3cc:	37 b1       	in	r19, 0x07	; 7
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_PinMode+0x8a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_PinMode+0x86>
 3dc:	80 95       	com	r24
 3de:	83 23       	and	r24, r19
 3e0:	87 b9       	out	0x07, r24	; 7
 3e2:	08 95       	ret
		}
		
		break;
		case 2:
		if(Mode==1)
 3e4:	61 30       	cpi	r22, 0x01	; 1
 3e6:	59 f4       	brne	.+22     	; 0x3fe <DIO_PinMode+0xb0>
		{
			SET_BIT(DDRD,Pin);
 3e8:	3a b1       	in	r19, 0x0a	; 10
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_PinMode+0xa6>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	2a 95       	dec	r18
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_PinMode+0xa2>
 3f8:	83 2b       	or	r24, r19
 3fa:	8a b9       	out	0x0a, r24	; 10
 3fc:	08 95       	ret
		}
		else if(Mode==0){
 3fe:	61 11       	cpse	r22, r1
 400:	0b c0       	rjmp	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			CLR_BIT(DDRD,Pin);
 402:	3a b1       	in	r19, 0x0a	; 10
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	2a 95       	dec	r18
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 95       	com	r24
 414:	83 23       	and	r24, r19
 416:	8a b9       	out	0x0a, r24	; 10
 418:	08 95       	ret

0000041a <DIO_digitalWrite>:
}
}

void DIO_digitalWrite(uint8 Pin_No ,uint8 State){
	
	uint8 port=Pin_No/10;
 41a:	9d ec       	ldi	r25, 0xCD	; 205
 41c:	89 9f       	mul	r24, r25
 41e:	91 2d       	mov	r25, r1
 420:	11 24       	eor	r1, r1
 422:	96 95       	lsr	r25
 424:	96 95       	lsr	r25
 426:	96 95       	lsr	r25
	uint8 Pin=Pin_No%10;
 428:	39 2f       	mov	r19, r25
 42a:	33 0f       	add	r19, r19
 42c:	23 2f       	mov	r18, r19
 42e:	22 0f       	add	r18, r18
 430:	22 0f       	add	r18, r18
 432:	23 0f       	add	r18, r19
 434:	82 1b       	sub	r24, r18
 436:	28 2f       	mov	r18, r24
	switch(port){
 438:	91 30       	cpi	r25, 0x01	; 1
 43a:	f9 f0       	breq	.+62     	; 0x47a <DIO_digitalWrite+0x60>
 43c:	18 f0       	brcs	.+6      	; 0x444 <DIO_digitalWrite+0x2a>
 43e:	92 30       	cpi	r25, 0x02	; 2
 440:	b9 f1       	breq	.+110    	; 0x4b0 <DIO_digitalWrite+0x96>
 442:	08 95       	ret
		
		
		case 0:
		if(State==1)
 444:	61 30       	cpi	r22, 0x01	; 1
 446:	59 f4       	brne	.+22     	; 0x45e <DIO_digitalWrite+0x44>
		{
			SET_BIT(PORTB,Pin);
 448:	35 b1       	in	r19, 0x05	; 5
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_digitalWrite+0x3a>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	2a 95       	dec	r18
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_digitalWrite+0x36>
 458:	83 2b       	or	r24, r19
 45a:	85 b9       	out	0x05, r24	; 5
 45c:	08 95       	ret
		}
		else if(State==0){
 45e:	61 11       	cpse	r22, r1
 460:	41 c0       	rjmp	.+130    	; 0x4e4 <DIO_digitalWrite+0xca>
			CLR_BIT(PORTB,Pin);
 462:	35 b1       	in	r19, 0x05	; 5
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_digitalWrite+0x54>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	2a 95       	dec	r18
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_digitalWrite+0x50>
 472:	80 95       	com	r24
 474:	83 23       	and	r24, r19
 476:	85 b9       	out	0x05, r24	; 5
 478:	08 95       	ret
		}
		
		break;
		case 1:
		if(State==1)
 47a:	61 30       	cpi	r22, 0x01	; 1
 47c:	59 f4       	brne	.+22     	; 0x494 <DIO_digitalWrite+0x7a>
		{
			SET_BIT(PORTC,Pin);
 47e:	38 b1       	in	r19, 0x08	; 8
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_digitalWrite+0x70>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_digitalWrite+0x6c>
 48e:	83 2b       	or	r24, r19
 490:	88 b9       	out	0x08, r24	; 8
 492:	08 95       	ret
		}
		else if(State==0){
 494:	61 11       	cpse	r22, r1
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <DIO_digitalWrite+0xca>
			CLR_BIT(PORTC,Pin);
 498:	38 b1       	in	r19, 0x08	; 8
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_digitalWrite+0x8a>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_digitalWrite+0x86>
 4a8:	80 95       	com	r24
 4aa:	83 23       	and	r24, r19
 4ac:	88 b9       	out	0x08, r24	; 8
 4ae:	08 95       	ret
		}
		
		break;
		case 2:
		if(State==1)
 4b0:	61 30       	cpi	r22, 0x01	; 1
 4b2:	59 f4       	brne	.+22     	; 0x4ca <DIO_digitalWrite+0xb0>
		{
			SET_BIT(PORTD,Pin);
 4b4:	3b b1       	in	r19, 0x0b	; 11
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_digitalWrite+0xa6>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	2a 95       	dec	r18
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_digitalWrite+0xa2>
 4c4:	83 2b       	or	r24, r19
 4c6:	8b b9       	out	0x0b, r24	; 11
 4c8:	08 95       	ret
		}
		else if(State==0){
 4ca:	61 11       	cpse	r22, r1
 4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <DIO_digitalWrite+0xca>
			CLR_BIT(PORTD,Pin);
 4ce:	3b b1       	in	r19, 0x0b	; 11
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_digitalWrite+0xc0>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	2a 95       	dec	r18
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_digitalWrite+0xbc>
 4de:	80 95       	com	r24
 4e0:	83 23       	and	r24, r19
 4e2:	8b b9       	out	0x0b, r24	; 11
 4e4:	08 95       	ret

000004e6 <DIO_digitalRead>:

}

uint8 DIO_digitalRead(uint8 Pin_No ){
	
	uint8 Pin=Pin_No/10;
 4e6:	9d ec       	ldi	r25, 0xCD	; 205
 4e8:	89 9f       	mul	r24, r25
 4ea:	91 2d       	mov	r25, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	96 95       	lsr	r25
 4f0:	96 95       	lsr	r25
 4f2:	96 95       	lsr	r25
	uint8 Pin_number=Pin_No%10;
 4f4:	39 2f       	mov	r19, r25
 4f6:	33 0f       	add	r19, r19
 4f8:	23 2f       	mov	r18, r19
 4fa:	22 0f       	add	r18, r18
 4fc:	22 0f       	add	r18, r18
 4fe:	23 0f       	add	r18, r19
 500:	82 1b       	sub	r24, r18
 502:	28 2f       	mov	r18, r24
	switch(Pin){
 504:	91 30       	cpi	r25, 0x01	; 1
 506:	69 f0       	breq	.+26     	; 0x522 <DIO_digitalRead+0x3c>
 508:	18 f0       	brcs	.+6      	; 0x510 <DIO_digitalRead+0x2a>
 50a:	92 30       	cpi	r25, 0x02	; 2
 50c:	99 f0       	breq	.+38     	; 0x534 <DIO_digitalRead+0x4e>
 50e:	1b c0       	rjmp	.+54     	; 0x546 <DIO_digitalRead+0x60>
		
		case 0:
		
		return GET_BIT(PINB,Pin_number);
 510:	83 b1       	in	r24, 0x03	; 3
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_digitalRead+0x34>
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	2a 95       	dec	r18
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_digitalRead+0x30>
 51e:	81 70       	andi	r24, 0x01	; 1
 520:	08 95       	ret
		
		break;
		case 1:
		return GET_BIT(PINC,Pin_number);
 522:	86 b1       	in	r24, 0x06	; 6
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_digitalRead+0x46>
 528:	95 95       	asr	r25
 52a:	87 95       	ror	r24
 52c:	2a 95       	dec	r18
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_digitalRead+0x42>
 530:	81 70       	andi	r24, 0x01	; 1
 532:	08 95       	ret
		break;
		case 2:
		return GET_BIT(PIND,Pin_number);
 534:	89 b1       	in	r24, 0x09	; 9
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_digitalRead+0x58>
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	2a 95       	dec	r18
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_digitalRead+0x54>
 542:	81 70       	andi	r24, 0x01	; 1
 544:	08 95       	ret
		break;
	}


 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
